#include <base/printf.h>
#include <stdint.h>
#include <timer_session/connection.h>

#define PERF_DEF_OPTS (1|16)

using namespace Genode;

/*static void
enable_cpu_counters(void* data)
{
	asm volatile("mcr p15, 0, &0, c9, c14, 0" :: "r"(1));
	asm volatile("mcr p15, 0, &0, c9, c12, 0" :: "r"(PERF_DEF_OPTS));
	asm volatile("mcr p15, 0, &0, c9, c12, 1" :: "r"(0x8000000f));
}
*/
static uint32_t
read_cycle_counter(void)
{
	uint32_t r = 0;
	asm volatile("mrc p15, 0, %0, c9, c13, 0" : "=r"(r));//0 cycle counter, 1 event type select, 2 event count register
	return r;
}

int fac(int a)
{
	if(a==1) {
		return 1;
	}
	return a*fac(a-1);
}

int main(void)
{
	Timer::Connection t;
	uint32_t start_time = 0;
	uint32_t end_time = 0;
	unsigned elapsed_ms = t.elapsed_ms();

	start_time = read_cycle_counter();	
	fac(100000000);
	end_time = read_cycle_counter();
	elapsed_ms = t.elapsed_ms() - elapsed_ms;
	printf("cycle delta:  %u\nElapsed time: %dms\nQuotient: %u\n", end_time - start_time,elapsed_ms,(end_time - start_time)/elapsed_ms);

	elapsed_ms = t.elapsed_ms();
	start_time = read_cycle_counter();	
	fac(150000000);
	end_time = read_cycle_counter();
	elapsed_ms = t.elapsed_ms() - elapsed_ms;
	printf("cycle delta:  %u\nElapsed time: %dms\nQuotient: %u\n", end_time - start_time,elapsed_ms,(end_time - start_time)/elapsed_ms);

	elapsed_ms = t.elapsed_ms();
	start_time = read_cycle_counter();	
	fac(200000000);
	end_time = read_cycle_counter();
	elapsed_ms = t.elapsed_ms() - elapsed_ms;
	printf("cycle delta:  %u\nElapsed time: %dms\nQuotient: %u\n", end_time - start_time,elapsed_ms,(end_time - start_time)/elapsed_ms);

	elapsed_ms = t.elapsed_ms();
	start_time = read_cycle_counter();	
	fac(250000000);
	end_time = read_cycle_counter();
	elapsed_ms = t.elapsed_ms() - elapsed_ms;
	printf("cycle delta:  %u\nElapsed time: %dms\nQuotient: %u\n", end_time - start_time,elapsed_ms,(end_time - start_time)/elapsed_ms);

	elapsed_ms = t.elapsed_ms();
	start_time = read_cycle_counter();	
	fac(250000000);
	t.msleep(1430);
	end_time = read_cycle_counter();
	elapsed_ms = t.elapsed_ms() - elapsed_ms;
	printf("cycle delta:  %u\nElapsed time: %dms\nQuotient: %u\n", end_time - start_time,elapsed_ms,(end_time - start_time)/elapsed_ms);
}




























